#define UNIFIED_RT_GROUP_SIZE_X 64
#define UNIFIED_RT_GROUP_SIZE_Y 1
#define UNIFIED_RT_RAYGEN_FUNC_NAME AccumulateInternal

#include "PathTracing.hlsl"
#include "LightmapIntegrationHelpers.hlsl"

int g_AccumulateDirectional;
int g_SampleOffset;
uint g_ExcludeMeshAndEnvironment;
uint g_ReceiveShadows;
float g_PushOff;
RWStructuredBuffer<float4> g_ExpandedOutput;
RWStructuredBuffer<float4> g_ExpandedDirectional;

void AccumulateInternal(UnifiedRT::DispatchInfo dispatchInfo)
{
    float3 worldPosition = 0.f;
    float3 worldNormal = 0.f;
    float3 worldFaceNormal = 0.f;
    uint localSampleOffset = 0;
    uint2 instanceTexelPos = 0;
    const bool gotSample = GetExpandedSample(dispatchInfo.dispatchThreadID.x, localSampleOffset, instanceTexelPos, worldPosition, worldNormal, worldFaceNormal);
    if (!gotSample)
        return;

    UnifiedRT::RayTracingAccelStruct accelStruct = UNIFIED_RT_GET_ACCEL_STRUCT(g_SceneAccelStruct);

    // now sample direct lighting with the gBuffer data
    const uint sampleOffset = g_SampleOffset + localSampleOffset;
    PathTracingSampler rngState;
    rngState.Init(instanceTexelPos, sampleOffset);

    float4 radiance = 0.f;
    float4 directional = 0.f;
    float3 lightRadiance = 0.f;
    float3 lightDirection = 0.f;
    uint numLights = g_NumLights;
    uint dimsOffset = 2; // first two dimensions are used for the stochastic gBuffer sampling
    for (uint lightIndex = 0; lightIndex < numLights; ++lightIndex)
    {
        PTLight light = FetchLight(lightIndex);
        if (g_ExcludeMeshAndEnvironment && (light.type == EMISSIVE_MESH || light.type == ENVIRONMENT_LIGHT))
            continue;
        if (!light.contributesToDirectLighting)
            continue;
        uint dimsUsed = 0;
        float3 origin = OffsetRayOrigin(worldPosition, worldFaceNormal, g_PushOff);
        SampleDirectRadiance(dispatchInfo, accelStruct, ShadowRayMask(), origin, rngState, dimsOffset, dimsUsed, light, g_ReceiveShadows, lightRadiance, lightDirection);
        // always start at an even dimension
        if (dimsUsed % 2 == 1)
            dimsUsed++;
        dimsOffset += dimsUsed;
        float nDotL = dot(worldNormal, lightDirection);
        if (nDotL <= 0.0f)
            continue;
        lightRadiance = lightRadiance * nDotL;
        radiance.rgb += lightRadiance;
        directional += float4(lightDirection, 1.f) * Luminance(lightRadiance);
    }

    // store new accumulated radiance
    g_ExpandedOutput[dispatchInfo.dispatchThreadID.x] += float4(radiance.rgb, 1.0f);
    if (g_AccumulateDirectional > 0)
        g_ExpandedDirectional[dispatchInfo.dispatchThreadID.x] += directional;
}

